<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity on 作品集</title>
    <link>http://localhost:1313/cn/tags/unity/</link>
    <description>Recent content in Unity on 作品集</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 04 Mar 2024 11:59:37 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/cn/tags/unity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Create Stylized GPU Instancing Billboard Grass Without Creating Position Buffer in URP</title>
      <link>http://localhost:1313/cn/ta/create-stylized-gpu-instancing-billboard-grass-without-creating-position-buffer-in-urp/</link>
      <pubDate>Mon, 04 Mar 2024 11:59:37 -0700</pubDate>
      <guid>http://localhost:1313/cn/ta/create-stylized-gpu-instancing-billboard-grass-without-creating-position-buffer-in-urp/</guid>
      <description>&lt;h2 id=&#34;environment&#34;&gt;Environment&lt;/h2&gt;&#xA;&lt;p&gt;Unity 2021.3.16f1&lt;br&gt;&#xA;URP 12.0&lt;/p&gt;&#xA;&lt;h2 id=&#34;prerequisite&#34;&gt;Prerequisite&lt;/h2&gt;&#xA;&lt;p&gt;Basic knowledge of C# and Shader programming (HLSL).&lt;/p&gt;&#xA;&lt;h2 id=&#34;gpu-instancing&#34;&gt;GPU Instancing&lt;/h2&gt;&#xA;&lt;p&gt;GPU instancing is a technique that allows you to draw multiple copies of the same mesh using a single draw call. It is basically normal forward rendering pipeline but skipping the Vertex Specification stage.&lt;/p&gt;&#xA;&lt;h2 id=&#34;graphicsdrawmeshinstancedindirect&#34;&gt;Graphics.DrawMeshInstancedIndirect&lt;/h2&gt;&#xA;&lt;p&gt;The first step to create multiple millions of grass is to properly call the GPU to draw so, a.k.a. draw call. In Unity, we can use &lt;code&gt;Graphics.DrawMeshInstancedIndirect&lt;/code&gt; to create a GPU instancing draw call.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Recreating the Rain Drop Effect in The Legend of Zelda: TOTK</title>
      <link>http://localhost:1313/cn/ta/recreating-the-rain-drop-effect-in-the-legend-of-zelda-totk/</link>
      <pubDate>Tue, 23 May 2023 23:50:10 -0400</pubDate>
      <guid>http://localhost:1313/cn/ta/recreating-the-rain-drop-effect-in-the-legend-of-zelda-totk/</guid>
      <description>&lt;h2 id=&#34;environment&#34;&gt;Environment&lt;/h2&gt;&#xA;&lt;p&gt;Unity 2021.3.16f1&lt;br&gt;&#xA;Universal Render Pipeline 12.0.0&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;I recently finished &lt;em&gt;The Legend of Zelda: Tears of the Kingdom&lt;/em&gt;. To me as an indie game developer, it felt like a text book of open world game design. I had a lot of fun playing it and I learned a lot from it.&lt;/p&gt;&#xA;&lt;p&gt;One of the things I noticed is the rain drop effect that react to the uppper edges of the scene. It&amp;rsquo;s a very subtle effect but it actually guided me through the thunder island where the player&amp;rsquo;s visibility range was less than 1 meter. In the image below, you can see that the rain drops react to the edge of the mining cart rails, which tells the player that there is a path to continue the journey. I guess probably the game designer didn&amp;rsquo;t intend to do this, but it&amp;rsquo;s Nintendo, you never know.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started in Xiheframework</title>
      <link>http://localhost:1313/cn/code/getting-started-xiheframework/</link>
      <pubDate>Thu, 18 May 2023 08:35:48 -0400</pubDate>
      <guid>http://localhost:1313/cn/code/getting-started-xiheframework/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In the previous post, I introduced the Xiheframework and its core modules. In this post, I will show you how to use it in your project and how to create your own modules in detail.&lt;/p&gt;&#xA;&lt;h2 id=&#34;import-xiheframework&#34;&gt;Import Xiheframework&lt;/h2&gt;&#xA;&lt;h3 id=&#34;via-git-submodule&#34;&gt;Via Git Submodule&lt;/h3&gt;&#xA;&lt;p&gt;The recommended way to import Xiheframework is to use Git Submodule. This way, you can easily update Xiheframework to the latest version.&lt;/p&gt;&#xA;&lt;p&gt;To do that:&lt;/p&gt;&#xA;&lt;p&gt;Run the following command from the root of your Unity project folder to add Xiheframework as a submodule.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Layer-based Screen-Door Transparency Effect using Unity URP 12</title>
      <link>http://localhost:1313/cn/ta/layer-based-screen-door-transparency-effect-using-unity-urp-12/</link>
      <pubDate>Sun, 07 May 2023 22:54:14 -0400</pubDate>
      <guid>http://localhost:1313/cn/ta/layer-based-screen-door-transparency-effect-using-unity-urp-12/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In this post, I will be discussing how I implemented a &lt;strong&gt;Screen-door transparency&lt;/strong&gt; effect in Unity using &lt;strong&gt;URP 12&lt;/strong&gt;. This effect is used to simulate the look of a transparent object by applying &lt;strong&gt;Bayer Ordered Dithering&lt;/strong&gt; to the semi-transparent object. This effect can be used in games to give the player a better view of the character even when the character is coverd by obstacles.&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;&#xA;&lt;p&gt;You can think of this effect as using a sharp pencil to poke a dense grid of holes onto a paper to reveal the objects behind the paper. Also you can use a Threshold value to control how transparent the object is, a.k.a, how density of the grid of holes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introducing Xiheframework</title>
      <link>http://localhost:1313/cn/code/introducing-xiheframework/</link>
      <pubDate>Fri, 05 May 2023 14:24:13 -0400</pubDate>
      <guid>http://localhost:1313/cn/code/introducing-xiheframework/</guid>
      <description>&lt;h2 id=&#34;what-is-xiheframework&#34;&gt;What is XiheFramework&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;XiheFramework&lt;/strong&gt; is a game framework for agile development, wrote on top of &lt;strong&gt;Unity&lt;/strong&gt; engine.&lt;/p&gt;&#xA;&lt;h2 id=&#34;who-should-use&#34;&gt;Who Should Use&lt;/h2&gt;&#xA;&lt;h3 id=&#34;scale&#34;&gt;Scale&lt;/h3&gt;&#xA;&lt;p&gt;Ideally at least two members:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Programmer for creating custom modules(game features)&lt;/li&gt;&#xA;&lt;li&gt;Technical designer for node editing&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Or use it as an individual developer (&lt;del&gt;hair loss rate 200%&lt;/del&gt;)&lt;/p&gt;&#xA;&lt;h3 id=&#34;skills&#34;&gt;Skills&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Unity Editor&lt;/li&gt;&#xA;&lt;li&gt;Node-based Editor&lt;/li&gt;&#xA;&lt;li&gt;C# (Custom Modules)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;warning-warning&#34;&gt;Warning &amp;#x26a0;&amp;#xfe0f;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Consider not to use this framework if you are work individually and have &lt;strong&gt;ZERO&lt;/strong&gt; programming skill as you probably will have a lot of pain if you just use the node editor for all game logic. However, this is just a warning, feel free to ignore it.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
